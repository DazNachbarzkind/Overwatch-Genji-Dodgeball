variables
{
	global:
		0: target
		5: ballIsOut
		23: CenterOffLimitsSize
		24: SphereSize
		25: circleCenter
		107: gravity

	player:
		26: currentGravity
}

subroutines
{
	5: deleteBall
}

rule("Map restrictions - put out center")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Global.circleCenter) < Global.CenterOffLimitsSize + 0.500;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.circleCenter, Event Player), 10, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Up, 1.500, To World, Incorporate Contrary Motion);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Map restrictions - player dashes too far out of bounds")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Vector(X Component Of(Global.circleCenter), Y Component Of(Position Of(Event Player)),
			Z Component Of(Global.circleCenter))) > Global.SphereSize + 5;
		"Workshop Island Fix"
		disabled (Current Map != Map(Workshop Island) && Current Map != Map(Workshop Island Night)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Knocked Down, 2.500);
		disabled Teleport(Event Player, Global.circleCenter + Vector(Random Integer(-15, 15), 8, Random Integer(-15, 15)));
		Apply Impulse(Event Player, Vector(X Component Of(Direction Towards(Position Of(Event Player), Global.circleCenter)), 0,
			Z Component Of(Direction Towards(Position Of(Event Player), Global.circleCenter))), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Up, 3, To World, Cancel Contrary Motion);
		Big Message(Event Player, Custom String("Do not dash out of the arena!"));
	}
}

rule("Map restrictions - push to circle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Vector(X Component Of(Global.circleCenter), Y Component Of(Position Of(Event Player)),
			Z Component Of(Global.circleCenter))) > Global.SphereSize - 1.500;
		"Workshop Island Fix"
		Current Map != Map(Workshop Island);
		Current Map != Map(Workshop Island Night);
	}

	actions
	{
		Apply Impulse(Event Player, Vector(X Component Of(Direction Towards(Position Of(Event Player), Global.circleCenter)), 0,
			Z Component Of(Direction Towards(Position Of(Event Player), Global.circleCenter))), 6, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Up, 3, To World, Incorporate Contrary Motion);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Map restrictions - player falls off Workshop Island")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night)) == True;
		Y Component Of(Position Of(Event Player)) < -0.500;
	}

	actions
	{
		"A MAN HAS FALLEN INTO THE LAKE IN WORKSHOP ISLAND! START THE NEW RESCUE RULE! HEY! BUILD THE NEW WORSHOP RULE, AND OFF TO THE RESCUE! PREPARE THE CONDITION, TELEPORT THE PLAYER, AND MAKE THE RESCUE! THE NEW 2.3.0 UPDATE FROM OVERWATCH WORKSHOP!"
		If(!Is Alive(Event Player));
			Teleport(Event Player, Global.circleCenter + Vector(Random Integer(-10, 10), 8, Random Integer(-10, 10)));
			If(Event Player == Global.target);
				If(Global.ballIsOut);
					Call Subroutine(deleteBall);
				End;
			End;
		End;
		Wait(0.500, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Map restrictions - water land")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) < -0.250;
		Y Component Of(Position Of(Event Player)) > -1.500;
		disabled (X Component Of(Position Of(Event Player)) > 20.250 || X Component Of(Position Of(Event Player)) < -20.250 || Z Component Of(
			Position Of(Event Player)) > 20.250 || Z Component Of(Position Of(Event Player)) < -20.250) == True;
		Is Alive(Event Player) == True;
		"Workshop Island Fix"
		(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night)) == True;
	}

	actions
	{
		Wait Until(!Is Using Ability 1(Event Player), 3);
		If(Y Component Of(Velocity Of(Event Player)) < 0);
			Set Gravity(Event Player, 0);
			Event Player.currentGravity = 0;
			Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
			Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		End;
		If(Y Component Of(Position Of(Event Player)) < -0.350);
			Apply Impulse(Event Player, Up, 1, To World, Cancel Contrary Motion);
			Wait(0.016, Ignore Condition);
			Loop If Condition Is True;
		End;
	}
}

rule("Map restrictions - water dive")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) <= -1.500;
		disabled (X Component Of(Position Of(Event Player)) > 20.100 || X Component Of(Position Of(Event Player)) < -20.100 || Z Component Of(
			Position Of(Event Player)) > 20.100 || Z Component Of(Position Of(Event Player)) < -20.100) == True;
		Is Alive(Event Player) == True;
		"Workshop Island Fix"
		(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night)) == True;
	}

	actions
	{
		If(X Component Of(Position Of(Event Player)) < 35 || X Component Of(Position Of(Event Player)) > -35 || Z Component Of(Position Of(
			Event Player)) < 35 || Z Component Of(Position Of(Event Player)) > -35);
			"Prevents people from going under the ledge on Workshop Island, which caused ball to go into floor.  Used to be an annoying stunkill"
			Apply Impulse(Event Player, Up, 2, To World, Cancel Contrary Motion XYZ);
			Apply Impulse(Event Player, Direction Towards(Event Player, Global.circleCenter), 2, To World, Incorporate Contrary Motion);
		End;
		If(X Component Of(Position Of(Event Player)) > 35 || X Component Of(Position Of(Event Player)) < -35 || Z Component Of(Position Of(
			Event Player)) > 35 || Z Component Of(Position Of(Event Player)) < -35);
			Apply Impulse(Event Player, Direction Towards(Event Player, Global.circleCenter), 3, To World, Incorporate Contrary Motion);
			Apply Impulse(Event Player, Up, 0.300, To World, Cancel Contrary Motion);
		End;
		Wait(0.008, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Map restrictions - water leave")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Y Component Of(Position Of(Event Player)) >= -0.200;
		Is Alive(Event Player) == True;
		"Workshop Island Fix"
		(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night)) == True;
	}

	actions
	{
		Set Gravity(Event Player, Global.gravity);
		Event Player.currentGravity = Global.gravity;
	}
}

rule("Map restrictions - island enter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		X Component Of(Position Of(Event Player)) < 20.100;
		X Component Of(Position Of(Event Player)) > -20.100;
		Z Component Of(Position Of(Event Player)) < 20.100;
		Z Component Of(Position Of(Event Player)) > -20.100;
		Is Alive(Event Player) == True;
		"Workshop Island Fix"
		(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night)) == True;
	}

	actions
	{
		Set Gravity(Event Player, Global.gravity);
		Event Player.currentGravity = Global.gravity;
	}
}